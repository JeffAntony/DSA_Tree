//
//
//import java.util.*;
//
//  class Node{
//    Node left,right;
//    int data;
//
//    public Node(int data)
//    {
//        this.data=data;
//    }
//}
//
//public class Tree_ {
//
//
//       static  Scanner sc = new Scanner(System.in);
//
//        static Node createtree()
//        {
//            Node root =null;
//            System.out.println("entr the data");
//            int data =sc.nextInt();
//            if(data == -1)
//
//                return null;
//
//            root = new Node(data);
//            System.out.println("enter the left data"+data);
//            root.left =createtree();
//            System.out.println("enter the right data"+data);
//            root.right=createtree();
//            return root;
//    }
//
//    public static void main(String[] args) {
//
//            createtree();
//    }
//}



// Tree in , post ,pre

import java.util.*;

class Node{
    Node left,right;
    int data;
    public Node(int data)
    {
        this.data=data;
    }
}
public class Tree_ {
    static Scanner sc =null;

    static Node createtree()
    {
        Node root =null;
        System.out.println("enter the data");
        int data =sc.nextInt();
        if(data==-1)
        {
            return null;
        }
        root = new Node(data);
        System.out.println("enter the left data");
        root.left =createtree();
        System.out.println("enter the right data");
        root.right =createtree();
        return root;
    }
    static void inorder(Node root)
    {
        if(root==null)
        {
            return ;
        }
        inorder(root.left);
        System.out.println(root.data+" ");
        inorder(root.right);
    }
    static void preorder(Node root)
    {
        if(root==null)
        {
            return ;
        }
        inorder(root.left);
        System.out.println(root.data+" ");
        inorder(root.right);
    }
    static void postorder(Node root)
    {
        if(root==null)
        {
            return ;
        }
        inorder(root.left);
        System.out.println(root.data+" ");
        inorder(root.right);
    }

    public static void main(String[] args) {
        sc = new Scanner(System.in);
        Node root =createtree();
        inorder(root);
        System.out.println();
        preorder(root);
        System.out.println();
        postorder(root);
        System.out.println();
    }
}

